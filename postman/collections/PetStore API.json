{
	"info": {
		"_postman_id": "94b3840a-b70c-42f1-977b-a0769fcc0783",
		"name": "PetStore API",
		"description": "[https://petstore.swagger.io/](https://petstore.swagger.io/)\n\n```\n[ Base URL: petstore.swagger.io/v2 ]\n\n ```\n\n[https://petstore.swagger.io/v2/swagger.json](https://petstore.swagger.io/v2/swagger.json)\n\nThis is a sample server Petstore server. You can find out more about Swagger at [http://swagger.io](http://swagger.io/) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "30444034-94b3840a-b70c-42f1-977b-a0769fcc0783"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15deb474-2847-4c98-9b98-878ebcb18a3f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9fa3e633-33f8-4f4a-a779-3f242dd07bf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"aaron\",\n  \"lastName\": \"lopez\",\n  \"email\": \"aaron.lopez@email.com\",\n  \"password\": \"Welcome@123\",\n  \"phone\": \"+528781355737\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user"
							]
						}
					},
					"response": [
						{
							"id": "1a7bc567-ee33-4433-9190-ef1cd80a24df",
							"name": "Create User",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 0,\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"phone\": \"{{$randomPhoneNumber}}\",\n  \"userStatus\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/v2/user",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"user"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68591653-721a-4a91-b5a3-6881ac647d6f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the schema of the response body\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('username');",
									"    pm.expect(responseData.username).to.be.a('string');",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData.email).to.be.a('string');",
									"    pm.expect(responseData).to.have.property('age');",
									"    pm.expect(responseData.age).to.be.a('number');",
									"    pm.expect(responseData).to.have.property('address');",
									"    pm.expect(responseData.address).to.be.an('object');",
									"    pm.expect(responseData.address).to.have.property('street');",
									"    pm.expect(responseData.address.street).to.be.a('string');",
									"    pm.expect(responseData.address).to.have.property('city');",
									"    pm.expect(responseData.address.city).to.be.a('string');",
									"    pm.expect(responseData.address).to.have.property('zip');",
									"    pm.expect(responseData.address.zip).to.be.a('string');",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Response has required headers\", function () {",
									"    pm.expect(pm.response.to.have.header(\"Content-Type\"));",
									"    pm.expect(pm.response.to.have.header(\"Cache-Control\"));",
									"});",
									"",
									"",
									"pm.test(\"Presence of Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Presence of Cache-Control header in the response\", function () {",
									"    pm.response.to.have.header('Cache-Control');",
									"});",
									"",
									"// Validate the response body schema using AJV",
									"pm.test(\"Schema is valid using AJV\", function () {",
									"  var schema = {",
									"    type: \"object\",",
									"    properties: {",
									"      username: { type: \"string\" },",
									"      email: { type: \"string\" },",
									"      age: { type: \"number\" },",
									"      address: {",
									"        type: \"object\",",
									"        properties: {",
									"          street: { type: \"string\" },",
									"          city: { type: \"string\" },",
									"          zip: { type: \"string\" }",
									"        },",
									"        required: [\"street\", \"city\", \"zip\"]",
									"      }",
									"    },",
									"    required: [\"username\", \"email\", \"age\", \"address\"]",
									"  };",
									"",
									"  var response = pm.response.json();",
									"  pm.expect(ajv.validate(schema, response)).to.be.true;",
									"});",
									"// Add a test to validate the JSON schema of the response",
									"pm.test(\"Response body schema is valid\", function () {",
									"    var responseJSON = pm.response.json();",
									"",
									"    pm.expect(responseJSON).to.be.an('object');",
									"    pm.expect(responseJSON).to.have.property('username').that.is.a('string');",
									"    pm.expect(responseJSON).to.have.property('email').that.is.a('string');",
									"    pm.expect(responseJSON).to.have.property('age').that.is.a('number');",
									"    ",
									"    // Validate the address object",
									"    pm.expect(responseJSON).to.have.property('address').that.is.an('object');",
									"    pm.expect(responseJSON.address).to.have.property('street').that.is.a('string');",
									"    pm.expect(responseJSON.address).to.have.property('city').that.is.a('string');",
									"    pm.expect(responseJSON.address).to.have.property('zip').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "94573223-9116-46da-878d-f5702f3ae483",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/user/:userName",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								":userName"
							],
							"variable": [
								{
									"key": "userName",
									"value": "{{userName}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "5150a2ce-e400-4c64-89c7-2101717fb449",
							"name": "Get user by username",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v2/user/:userName",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"user",
										":userName"
									],
									"variable": [
										{
											"key": "userName",
											"value": "{{userName}}1"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"id": "f529aee6-c885-4d0c-b158-93ff794b51a6",
							"name": "Get user by username",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/v2/user/:userName",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v2",
										"user",
										":userName"
									],
									"variable": [
										{
											"key": "userName",
											"value": "Jorge701"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Update user Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4937fa1a-de6a-4e81-9584-baf542c90163",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response code is OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Validate ResponseBody Field [code]\", () =>{",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.code).eql(200)",
									"});",
									"",
									"pm.test(\"Validate Multiple ResponseBody Fields [code, type]\", () =>{",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.code).eql(200)",
									"    pm.expect(responseJson.type).to.eql(\"unknown\")",
									"});",
									"",
									"pm.test('Validate PUT request code', () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
									"});",
									"",
									"pm.test(\"Validate Status name\", ()=> {",
									"    pm.response.to.have.status(\"OK\")",
									"})",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Transfer-Encoding')).to.include('chunked')",
									"});",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"const json = pm.response.json()",
									"pm.test(\"Validate Response Object\", () => {",
									"    pm.expect(json).to.be.an('object')",
									"    pm.expect(json.code).to.be.an('number')",
									"})",
									"",
									"pm.test(\"Validate Environment name\", ()=> {",
									"    pm.expect(pm.environment.name).to.be.eql('PetStore Env')",
									"})",
									"",
									"pm.test(\"Validate Environment Vaiable value\", ()=> {",
									"    pm.expect(pm.environment.get('userName')).to.be.eql('aaronlopezo1')",
									"})",
									"",
									"",
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"message\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"code\",",
									"    \"type\",",
									"    \"message\"",
									"  ]",
									"}",
									"",
									"pm.test(\"Validate JSON Schema\", () =>{",
									"    pm.response.to.have.jsonSchema(schema)",
									"})",
									"",
									"const Ajv = require(\"ajv\")",
									"const ajv = new Ajv()",
									"pm.test(\"Validate JSON Schema using TinyValidator V4\", () =>{",
									"    pm.expect(ajv.validate(pm.response, schema)).to.be.true",
									"})",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b2490f2f-5562-4d4b-b9c5-4b17f7729bb8",
								"exec": [
									"console.log(pm.environment.get(\"userName\"));",
									"pm.environment.set(\"userName\", \"randomName\");",
									"console.log(pm.environment.get(\"userName\"));",
									"pm.environment.unset(\"userName\");",
									"",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});",
									"",
									"console.warn('Warning')",
									"console.error(\"Error\")",
									"console.info('Information')",
									"console.log(\"Logger\")",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "db6d42d9-9323-4ef3-b4d9-39e85087341d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"username\": \"aaronlopezo\",\n  \"firstName\": \"aaron\",\n  \"lastName\": \"lopez\",\n  \"email\": \"aaron.lopez@email.com\",\n  \"password\": \"Welcome@1234\",\n  \"phone\": \"+528781355737\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user/aaronlopezo1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"aaronlopezo1"
							]
						}
					},
					"response": []
				}
			],
			"id": "8b7a393f-b7f8-43a8-980f-84eb30f76b63"
		},
		{
			"name": "Pet",
			"item": [
				{
					"name": "Create a new Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7acd3208-c45f-4407-aa95-95e7d1e72e92",
								"exec": [
									"pm.test(\"Save new Pet Information\", ()=> {",
									"    const json = pm.response.json()",
									"    pm.environment.set(\"petName\", json.category.name)",
									"    pm.environment.set(\"petId\", json.id)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f8e574bb-503c-4058-b334-42bdc9963342",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"{{$randomUserName}}\"\n  },\n  \"name\": \"cat\",\n  \"photoUrls\": [\n    \"{{$randomAnimalsImage}}\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pet by Id",
					"id": "b301d3ad-2730-402e-9ccd-0fae70e9d0a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/pet/:petId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "26"
								}
							]
						},
						"description": "Get pet by id using path variable"
					},
					"response": []
				}
			],
			"id": "5ab18966-4847-4af5-bc67-1e88b3d403da"
		}
	]
}